#!/usr/bin/env python3

import os
import subprocess
import sys

# プロジェクト名
PROJECT_NAME = "veryl_cpu"

# 定数
VERILATOR_TOP_MODULE = f"{PROJECT_NAME}_top"
VERILATOR_OBJ_DIR = "obj_dir"
VERILATOR_MAKEFILE = f"V{VERILATOR_TOP_MODULE}.mk"
EXECUTABLE = f"{VERILATOR_OBJ_DIR}/V{VERILATOR_TOP_MODULE}"

VERYL_VERSION = "0.13.3"
VERYL_COMMAND = ["veryl", f"+{VERYL_VERSION}"]

def run_veryl_clean():
    print("[INFO] Running 'veryl clean'")
    subprocess.run([*VERYL_COMMAND, "clean"], check=True)
    print("[INFO] Cleaning Verilator files")
    subprocess.run(["rm", "-r", VERILATOR_OBJ_DIR])

# フォーマット
def run_veryl_fmt():
    print("[INFO] Running 'veryl fmt'")
    subprocess.run([*VERYL_COMMAND, "fmt"], check=True)

# ビルド
def run_veryl_build():
    print("[INFO] Running 'veryl build'")
    subprocess.run([*VERYL_COMMAND, "build"])

# Verilatorの実行
def run_verilator():
    print("[INFO] Running Verilator")
    verilator_cmd = [
        "verilator", 
        "--cc", 
        "-f", f"{PROJECT_NAME}.f", 
        "--exe", "src/tb_verilator.cpp", 
        "--top-module", VERILATOR_TOP_MODULE, 
        "--Mdir", VERILATOR_OBJ_DIR
    ]
    subprocess.run(verilator_cmd, check=True)

# Makeの実行
def run_make():
    print("[INFO] Running make")
    make_cmd = ["make", "-C", VERILATOR_OBJ_DIR, "-f", VERILATOR_MAKEFILE, "-j", str(os.cpu_count())]
    subprocess.run(make_cmd, check=True)

# シミュレーションの実行
def run_sim(args):
    print(f"[INFO] Running simulation: {EXECUTABLE} {' '.join(args)}")
    subprocess.run([EXECUTABLE, *args], check=True)

# Main
def main():
    if len(sys.argv) < 2:
        print("Usage: ./bin [clean|build|sim] [arguments]")
        return

    command = sys.argv[1]

    if command == "clean":
        run_veryl_clean()
    elif command == "build":
        run_veryl_fmt()
        run_veryl_build()
    elif command == "sim":
        run_verilator()
        run_make()
        run_sim(sys.argv[2:])
    else:
        print(f"[ERROR] Unknown command: {command}")
        print("Usage: ./bin [clean|build|sim] [arguments]")

if __name__ == "__main__":
    main()
